import {Arg, Ctx, Field, Mutation, ObjectType, Query, Resolver} from "type-graphql";
import {ContextType} from "src/types";
import {User} from "../entities/User";
import argon2 from 'argon2';
import {getConnection} from "typeorm";
import validateRegister from "../utils/validateRegister";
import {UsernamePasswordInput} from "./UsernamePasswordInput";
import {COOKIE_NAME} from "../constants";

// this type is generated by gql and is automatically generated based on the schema for the front end
// it is used in register.tsx
@ObjectType()
export class FieldError {
  @Field()
  message: string;
}

@ObjectType()
export class UserResponse {
  @Field(() => [FieldError], {nullable: true})
  errors?: FieldError[];

  @Field(() => User, {nullable: true})
  user?: User;
}

@Resolver()
export class UserResolver {
  @Query(() => User, {nullable: true})
  async testLogin(@Ctx() {req}: ContextType) {
    // you are not logged in
    if (!req.session.userId) {
      return null;
    }
    return await User.findOne(req.session.userId);
  }

  @Mutation(() => UserResponse)
  async register(
    @Arg('options') options: UsernamePasswordInput, // the type-graphql type has been inferred
    @Ctx() {req}: ContextType
  ) {
    const errors = validateRegister(options);
    if (errors) {
      return {errors};
    }
    const hashedPassword = await argon2.hash(options.password);
    let user;
    try {
      const result = await getConnection().createQueryBuilder().insert().into(User).values({
        username: options.username,
        password: hashedPassword
      }).returning("*").execute();
      user = result.raw[0];
    } catch (err) {
      if (err.code === "23505") {
        return {
          errors:
            [{message: "username already exists"}]
        };
      }
    }
    req.session.userId = user.id;
    return {user};
  }

  // Type created for handling response and errors - UserResponse can return {[FieldError]?, user?}
  // These are gql types, and therefore define the shape of the json which will be returned for the query
  // in this case it will be {errors, user}, each could be null
  @Mutation(() => UserResponse)
  async login(
    @Arg('options') options: UsernamePasswordInput, // the type-graphql type has been inferred
    @Ctx() {req}: ContextType
  ): Promise<UserResponse> {
    const user = await User.findOne({username: options.username});
    const genericError = {errors: [{message: "Incorrect username or password"}]};
    if (!user) {
      return genericError;
    }
    const valid = await argon2.verify(user.password, options.password);
    if (!valid) {
      return genericError;
    }
    req.session.userId = user.id;
    return {user};
  }

  @Mutation(() => Boolean)
  async logout(@Ctx() {req, res}: ContextType): Promise<boolean> {
    return new Promise(resolve => req.session.destroy(err => {
      res.clearCookie(COOKIE_NAME);
      if (err) {
        console.log(err);
        resolve(false);
        return;
      }
      resolve(true);
    }));
  }
}
